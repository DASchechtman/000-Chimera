#pragma once

#include <string>
#include <vector>

using namespace std;

/*
this class is used to store/pass text data around the parser for various needs
for example every data typed in (ie the 5 in print|5|) is stored as a temp data wrapper object
in the interpreter, so this class allows for the easy storage and transfer of multiple temp var
names
*/
class StrWrapper
{
private:

    // this field stores the data associated with the final result of an operation
    // if an operation can return multiple values back, it should leave this empty
    string m_primary_data;

    // this field stores any extra data generated by an operator
    vector<string> m_extra_data;

public:

    // easy way to get/set data of other types
    void operator=(string const &data);
    void operator=(const char *data);
    string operator[](unsigned int index);

    // unsure if this has to be implemenented in the
    // same file it's declared, but to be safe I implemented it here
    operator string()
    {
        return m_primary_data;
    }

    operator vector<string>() {
        return m_extra_data;
    }

    // easy way to print so I don't have to call a method returning
    // some internal data of an object
    friend ostream &operator<<(ostream &output, const StrWrapper &str)
    {
        output << str.m_primary_data;
        return output;
    }


    void SetFinalResult(string data);
    void SetFinalResult(char data);
    
    // is a setter method, but removes the first and last character
    // from the passed in c-string
    void SetWithOmittedEnds(const char *data);

    string GetFinalResult();

    void AddPending(string data);
    string GetPending(unsigned int i);
    void SetPending(unsigned int i, string data);
    string RemoveFromPending(unsigned int i);

    void ClearPending();
    size_t PendingDataSize();

    // just a shorthand for PendingDataSize() > 0
    bool HasPendingData();
};
